import os
from optparse import OptionParser



parser = OptionParser();
parser.add_option("-m", "--mesh", dest="mesh",
                  help="The name of the desired mesh file");
parser.add_option("-o", "--output", dest="output",
                  help="The name of the header file being generated")
parser.add_option("-e", "--endFrame", dest="endFrame", default="160",
                  help="The amount of frames to be generated")
parser.add_option("-r", "--frameRate", dest="frameRate", default="24",
                  help="The amount of frames per second")
parser.add_option("-g", "--gravity", dest="gravity", default = "-9.8",
                  help="The gravity rate")

(options, args) = parser.parse_args();
mesh = options.mesh;
output = options.output;
endFrame = options.endFrame;
frameRate = options.frameRate;
gravity = options.gravity;
                  

f = open(output, "w+", newline = "\n");


f.write('std::string helper_output;\n')
f.write('bool helper_isotropic;\n')
f.write('TV helper_fiber;\n')
f.write('T helper_alpha = 0;\n')
f.write('if (CmdHelper::helper == 1) {\n')
f.write('    helper_output = "output/meatTear_anisotropic";\n')
f.write('    helper_isotropic = false;\n')
f.write('    helper_fiber = TV(0.9487, 0, -0.3156);\n')
f.write('    helper_alpha = -1;\n')
f.write('}\n')
f.write('else if (CmdHelper::helper == 2) {\n')
f.write('    helper_output = "output/meatTear_isotropic";\n')
f.write('    helper_isotropic = true;\n')
f.write('    helper_fiber = TV(1, 0, 0);\n')
f.write('    helper_alpha = 0;\n')
f.write('}\n')
f.write('else\n')
f.write('    ZIRAN_ASSERT(0);\n')
f.write('\n')
f.write('sim.output_dir.path = helper_output;\n')
f.write('sim.write_partio = false; // don\'t dumpout partio$F.bgeo\n')
f.write('sim.end_frame = ' + endFrame + ';\n')
f.write('T frameRate = ' + frameRate + ';\n')
f.write('sim.step.frame_dt = (T)1 / frameRate;\n')
f.write('sim.gravity = ' + gravity + ' * TV::Unit(1);\n')
f.write('sim.step.max_dt = 5e-4;\n')
f.write('sim.symplectic = true;\n')
f.write('sim.verbose = false;\n')
f.write('sim.cfl = 0.4;\n')
f.write('// sim.transfer_scheme = MpmSimulationBase<T, dim>::APIC_blend_RPIC;\n')
f.write('//sim.apic_rpic_ratio = 0.01;\n')
f.write('sim.transfer_scheme = MpmSimulationBase<T, dim>::FLIP_blend_PIC;\n')
f.write('sim.flip_pic_ratio = 0; // FULL PIC for damping\n')
f.write('//sim.rpic_damping_iteration = 5;\n')
f.write('sim.dump_F_for_meshing = true;\n')
f.write('T particle_per_cell = 7;\n')
f.write('\n')
f.write('T Youngs = 5000;\n')
f.write('T nu = 0.45;\n')
f.write('T rho = 500;\n')
f.write('\n')
f.write('// sample particles from a .mesh file\n')
f.write('std::string filename = "' + mesh + '";\n')
f.write('MpmParticleHandleBase<T, dim> particles_handle = init_helper.sampleFromTetWildFile(filename, rho);\n')
f.write('T total_volume = particles_handle.total_volume;\n')
f.write('T particle_count = particles_handle.particle_range.length();\n')
f.write('T per_particle_volume = total_volume / particle_count;\n')
f.write('\n')
f.write('// set dx\n')
f.write('sim.dx = std::pow(particle_per_cell * per_particle_volume, (T)1 / (T)3);\n')
f.write('\n')
f.write('// dump a vtk file in the output folder for mpmmeshing\n')
f.write('if (1) {\n')
f.write('    StdVector<TV> samples;\n')
f.write('    StdVector<Vector<int, 4>> indices;\n')
f.write('    std::string absolute_path = DataDir().absolutePath(filename);\n')
f.write('    readTetMeshTetWild(absolute_path, samples, indices);\n')
f.write('    sim.output_dir.createPath();\n')
f.write('    std::string vtk_path = DataDir().path + "/../Projects/anisofracture/" + sim.output_dir.path + "/tet.vtk";\n')
f.write('    writeTetmeshVtk(vtk_path, samples, indices);\n')
f.write('}\n')
f.write('\n')
f.write('init_helper.addAllWallsInDomain(4096 * sim.dx, 5 * sim.dx, AnalyticCollisionObject<T, dim>::STICKY); // add safety domain walls for SPGrid.\n')
f.write('\n')
f.write('// QRAnisotropic<T, dim> model(Youngs, nu, helper_isotropic);\n')
f.write('\n')
f.write('StdVector<TV> a_0;\n')
f.write('StdVector<T> alphas;\n')
f.write('TV a_1, a_2;\n')
f.write('a_1 = helper_fiber;\n')
f.write('a_1.normalize();\n')
f.write('a_0.push_back(a_1);\n')
f.write('alphas.push_back(helper_alpha);\n')
f.write('T theta2 = std::atan2(a_1[1], a_1[2]) * (180 / M_PI);\n')
f.write('\n')
f.write('T percentage = 0.2; //.22 was too high I think\n')
f.write('T l0 = 0.5 * sim.dx;\n')
f.write('T eta = 0.45; //you will seg fault if this is too low\n')
f.write('T zeta = 1;\n')
f.write('bool allow_damage = true;\n')
f.write('T residual_stress = 0.1; // 0.08;\n')
f.write('\n')
f.write('// model.scaleFiberStiffness(0, 10); //does nothing if isotropic is set in the model as true\n')
f.write('\n')
f.write('if (helper_isotropic) {\n')
f.write('    QRStableNeoHookean<T, dim> model(Youngs, nu);\n')
f.write('    particles_handle.addFBasedMpmForceWithAnisotropicPhaseField(a_0, alphas, percentage, l0, model, eta, zeta, allow_damage, residual_stress);\n')
f.write('}\n')
f.write('else {\n')
f.write('    QRStableNeoHookean<T, dim> model(Youngs, nu);\n')
f.write('    model.setExtraFiberStiffness(0, 10);\n')
f.write('    particles_handle.addFBasedMpmForceWithAnisotropicPhaseField(a_0, alphas, percentage, l0, model, eta, zeta, allow_damage, residual_stress);\n')
f.write('}\n')
f.write('\n')
f.write('//Set up a ground plane\n')
f.write('TV ground_origin = TV(0, 1, 0);\n')
f.write('TV ground_normal(0, 1, 0);\n')
f.write('HalfSpace<T, dim> ground_ls(ground_origin, ground_normal);\n')
f.write('AnalyticCollisionObject<T, dim> ground_object(ground_ls, AnalyticCollisionObject<T, dim>::SEPARATE);\n')
f.write('ground_object.setFriction(.2);\n')
f.write('init_helper.addAnalyticCollisionObject(ground_object);\n')
f.write('\n')
f.write('auto leftTransform = [](T time, AnalyticCollisionObject<T, dim>& object) {\n')
f.write('    TV translation = TV(0 * time + (time < 0.5) * 9, 0, 0);\n')
f.write('    TV translation_velocity(0, 0, 0);\n')
f.write('    object.setTranslation(translation, translation_velocity);\n')
f.write('};\n')
f.write('// Sphere<T, dim> sphere(TV(2.37, 1.03, 1.95), 0.1);\n')
f.write('AxisAlignedAnalyticBox<T, dim> sphere(TV(2.32, 0.93, 1.83), TV(2.42, 1.13, 2.13));\n')
f.write('AnalyticCollisionObject<T, dim> leftObject(leftTransform, sphere, AnalyticCollisionObject<T, dim>::STICKY);\n')
f.write('init_helper.addAnalyticCollisionObject(leftObject);\n')
f.write('\n')
f.write('auto rightTransform = [](T time, AnalyticCollisionObject<T, dim>& object) {\n')
f.write('    if (time > 0.5) {\n')
f.write('        TV translation = TV(0.5 / 3 * (time - 0.5), 0.5 / 3 * (time - 0.5), 0);\n')
f.write('        TV translation_velocity(0.5 / 3, .5 / 3, 0);\n')
f.write('        object.setTranslation(translation, translation_velocity);\n')
f.write('    }\n')
f.write('    else {\n')
f.write('        TV translation = TV(9, 9, 9);\n')
f.write('        TV translation_velocity(0, 0, 0);\n')
f.write('        object.setTranslation(translation, translation_velocity);\n')
f.write('    }\n')
f.write('};\n')
f.write('// Sphere<T, dim> sphere2(TV(2.82, 1.03, 1.95), 0.1);\n')
f.write('CappedCylinder<T, dim> cylinder1(0.1, 0.1, Vector<T, 4>(1, 0, 0, 0), TV(2.82, 1.04, 1.95));\n')
f.write('HalfSpace<T, dim> board2(TV(0, 1, 0), TV(0, 1, 0));\n')
f.write('DifferenceLevelSet<T, dim> cutsphere2;\n')
f.write('cutsphere2.add(cylinder1, board2);\n')
f.write('AnalyticCollisionObject<T, dim> rightObject(rightTransform, cutsphere2, AnalyticCollisionObject<T, dim>::STICKY);\n')
f.write('init_helper.addAnalyticCollisionObject(rightObject);\n')

f.close();